@page "/report/{ReportId}"
@rendermode InteractiveServer

@using ReportsManager.Entities;
@using ReportsManager.Services
@inject ReportService ReportService

<style>
    .row {
        display: flex;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0; /* Light gray background */
    }

    .col-md-3 {
        width: 25%;
        border-right: 2px solid #aaa; /* Gray border */
        padding: 10px;
        background-color: #eee; /* Slightly darker gray for the sidebar */
    }

    .col-md-9 {
        width: 75%;
        padding: 10px;
        max-width: 850px;
        overflow: scroll;
    }

    #Parameters, #ReportOutput {
        border: 2px solid #888; /* Darker gray border */
        margin-bottom: 10px;
        padding: 10px;
        background-color: white;
    }

    button {
        background-color: #4CAF50; /* Green background */
        color: white;
        border: none;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px; /* Rounded corners */
    }

        button:hover {
            background-color: #45a049; /* Darker green on hover */
        }
</style>

<div class="row">
    <div class="col-md-3">
        <h3>Parameters for @report.Name</h3>
        @foreach (var parameter in report.Parameters)
        {
            <div id="Parameters">
                <label>@parameter.Value.Label</label>
                @if (parameter.Value.Type == "DropList")
                {
                    <select @bind="selectedParameters[parameter.Key]">
                        @foreach (var value in parameter.Value.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
                else if (parameter.Value.Type == "CheckList")
                {
                    foreach (var value in parameter.Value.Values)
                    {
                        <div>
                            <input type="checkbox" id="@value" name="@value" @onchange="e => UpdateCheckList(parameter.Key, value, (bool)e.Value)">
                            <label for="@value">@value</label>
                        </div>
                    }
                }
            </div>
        }
        <button @onclick="GenerateReport">Generate Report</button>
    </div>
    @if (!string.IsNullOrEmpty(reportOutput))
    {
        <div id="ReportOutput" class="col-md-9">
            <h4>Sample Output</h4>
            <div>@(new MarkupString(reportOutput.Replace("\n", "<br />")))</div>
        </div>
    }
</div>


@code {
    [Parameter]
    public string ReportId { get; set; }

    private Entities.Report report;
    private string reportOutput;
    private Dictionary<string, string> selectedParameters = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        report = ReportService.GetReport(ReportId);
        
        foreach (var parameter in report.Parameters)
        {
            if (parameter.Value.Type == "DropList" || parameter.Value.Type == "CheckList")
            {
                selectedParameters[parameter.Key] = parameter.Value.Values.FirstOrDefault() ?? string.Empty;
            }
            else
            {
                selectedParameters[parameter.Key] = string.Empty;
            }
        }
    }

    public void UpdateCheckList(string parameterKey, string value, bool isChecked)
    {
        if (isChecked)
        {
            if (selectedParameters.ContainsKey(parameterKey))
            {
                selectedParameters[parameterKey] += $", {value}";
            }
            else
            {
                selectedParameters[parameterKey] = value;
            }
        }
        else
        {
            var values = selectedParameters[parameterKey].Split(", ").ToList();
            values.Remove(value);
            selectedParameters[parameterKey] = string.Join(", ", values);
        }
    }

    private void GenerateReport()
    {
        reportOutput = ReportService.GenerateReport(report.Id, selectedParameters);

    }
}
